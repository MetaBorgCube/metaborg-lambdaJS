module Lexical

lexical syntax
// x is defined as ID
  ID             = [a-zA-Z\_\$] [a-zA-Z0-9\_\$]* 

  INT            = "-"? [0-9]+ 
  BOOLEAN		 = "true" | "false"
  UNDEFINED		 = "undefined"
  NULL			 = "null"
  PROTO	 		 = "\"__proto__\""
  
  STRING         = "\"" StringChar* "\"" 
  STRING	 	 = "\"__proto__\"" {reject}
  StringChar     = ~[\"\n] 
  StringChar     = "\\\"" 
  StringChar     = BackSlashChar 
  BackSlashChar  = "\\" 
  
  LAYOUT         = [\ \t\n\r] 
  
  CommentChar    = [\*] 
  LAYOUT         = "/*" InsideComment* "*/" 
  InsideComment  = ~[\*] 
  InsideComment  = CommentChar 
  
  LAYOUT         = "//" ~[\n\r]* NewLineEOF 
  NewLineEOF     = [\n\r] 
  NewLineEOF     = EOF 
  EOF            =  
  
  //Check for reserved values
  ID = KEYWORD {reject}
	KEYWORD = "false"
	KEYWORD = "true"
	KEYWORD = "undefined"
	KEYWORD = "null"
	
	KEYWORD = "let"
	KEYWORD = "func"
	KEYWORD = "return"
	
	KEYWORD = "delete"
	
	KEYWORD = "ref"
	KEYWORD = "deref"
	
	KEYWORD = "print"
	
	KEYWORD = "__proto__"

lexical restrictions

  // Ensure greedy matching for lexicals
  
  CommentChar   -/- [\/]
  INT           -/- [0-9]
  ID            -/- [a-zA-Z0-9\_\$]
  
  // EOF may not be followed by any char
  
  EOF           -/- ~[]
  
  // Backslash chars in strings may not be followed by " 
  
  BackSlashChar -/- [\"]

  
  