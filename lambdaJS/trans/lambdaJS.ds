module trans/lambdaJS

imports
src-gen/ds-signatures/lambdaJS-sig

signature
	sorts
		V

	constructors
		ObjV : Map(V,V) -> V
		StrV : String -> V
		NumV : INT -> V
		BoolV : BOOLEAN -> V
		UndefV : V
		NullV : V
		LocV : Int -> V
		ClosV : List(String) * Exp * Env -> V 
		
	native operators
		printV: V -> V

	sort aliases
		Address = Int
		Env = Map(String, V)
		Heap = Map(Address, V)
		Global = Map(String, Address)

	components
		E : Env
		O : Map(V,V)
		H : Heap
		G : Global
		
	variables
	    v : V
  
  	arrows
		bindVar(String, V) --> Env
		readVar(String) --> V
		
		bindProperty(V, V) --> Map(V,V)
		removeProperty(V) --> Map(V,V)
		getProperty(V) --> V
		
		bindGlobal(String, Address) --> Global
		readGlobal(String) --> Address
		
		bindFuncArgs(List(String), List(Exp)) --> Env
		
		listToObj(List(Field)) --> Map(V,V)
		
		evaluate(List(Exp), List(V)) --> List(V)
		
		Start -init-> List(V)
		Exp --> V
		Val --> V
		Field --> V

	rules
		Print(e) --> printV(e)
	
		O |- bindProperty(v1, v2) --> {v1 |--> v2, O}	
		O |- removeProperty(strv) --> O \ strv
		O |- getProperty(strv) --> O[strv]

		E |- bindVar(name, v) --> {name |--> v, E}
		E |- readVar(name) --> E[name]
		
		E |- bindFuncArgs([], []) --> E
		E |- bindFuncArgs([arg | args], [e | exps]) --> E3
		where
			E |- e --> v;
			E |- bindVar(arg, v) --> E2;
			E E2 |- bindFuncArgs(args, exps) --> E3
		
		bindGlobal(name, addr) :: G --> {name |--> addr, G}
		readGlobal(name) :: G --> G[name]
		
		//TODO: protoyping (adjust get field -> <no proto, no field>, <proto null, no field>, <no field, check proto>)
		//TODO: fix ambiguity of ref deref
		
		Program(e) -init-> vals
		where
			evaluate(e, []) :: G {}, H {} --> vals
			
		evaluate([], vals) --> vals
		
		evaluate([e | exps], vals) --> newVals
		where
			E {} |- e --> v;
			evaluate(exps, vals ++ [v]) --> newVals
			
		Value(e) --> val
		where
			e --> val
		
		INT(i) --> NumV(i)
		
		BOOLEAN(i) --> BoolV(i)
		
		UNDEFINED(_) --> UndefV()
		
		NULL(_) --> NullV()
		
		STRING(i) --> StrV(i)
		
		E |- Identifier(name) :: G, H --> v
		where
			case E[name?] of {
				true =>
					E |- readVar(name) --> v
				false =>
					readGlobal(name) :: G --> addr;
					H[addr] => v
			}
		
		Obj(propList) --> ObjV(obj)
		where
			{} => O;
			O |- listToObj(propList) --> obj
		
		Prop(name, _) --> StrV(name)
		
		O |- listToObj([]) --> O
			
		O |- listToObj([Prop(name, val) | listRest]) --> obj2
		where
			Prop(name, val) --> v1;
			val --> v2;
			O |- bindProperty(v1,v2) --> O2;
			O2 |- listToObj(listRest) --> obj2
			
		E |- Func(args, e) --> ClosV(args, e, E)

		Get(e1, e2) --> v2
		where
			e1 --> ObjV(O);
			e2 --> v1;
			case O[v1?] of {
				true =>
					O |- getProperty(v1) --> v2		
				false =>
					UndefV() => v2
			}

		Instantiation(e1, e2, e3) --> ObjV(obj2)
		where
			e1 --> ObjV(O);
			e2 --> v1;
			e3 --> v2;
			O |- bindProperty(v1, v2) --> obj2
		
		Delete(e1, e2) --> ObjV(obj2)
		where
			e1 --> ObjV(O);
			e2 --> v;
			case O[v?] of {
				true =>
					O |- removeProperty(v) --> obj2		
				false =>
					O => obj2	
			}
	
		Let(x, e1, e2) --> v2
  		where
  			e1 --> v1;
  			bindVar(x, v1) --> E2;
			E E2|- e2 --> v2
			
		App(e, exps) --> v
		where
			e --> ClosV(args, ret, E2);
			E E2 |- bindFuncArgs(args, exps) --> E3;
			E3 |- ret --> v
	
		Assign(id, exp) :: G, H --> v :: G', H {addr |--> v, H'}
		where
			case G[id?] of {
				true =>
					readGlobal(id) :: G --> addr;
					G => G'	
				false =>
					fresh => addr;
					bindGlobal(id, addr) :: G --> G'
			};
			exp :: H --> v :: H'
		
		Ref(exp) :: H --> LocV(addr) :: H {addr |--> v, H'}
		where
			exp :: H --> v :: H';
			fresh => addr
		
		Deref(exp) :: H --> v :: H'
		where
			exp :: H --> LocV(addr) :: H';
			H'[addr] => v
			